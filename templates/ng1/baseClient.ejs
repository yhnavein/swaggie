/* tslint:disable */
/* eslint-disable */
//----------------------
// <auto-generated>
//   Generated using Swaggie (https://github.com/yhnavein/swaggie)
//   Please avoid doing any manual changes in this file
// </auto-generated>
//----------------------
// ReSharper disable InconsistentNaming

import { IHttpService, IRequestShortcutConfig, IPromise } from 'angular';

abstract class BaseService {
  constructor(protected readonly $http: IHttpService, public baseUrl: string) { }

  protected $get<T>(
    url: string,
    config?: IRequestShortcutConfig
  ): IPromise<T> {
    return this.$http.get(this.baseUrl + url, config).then((response: any) => {
      return this.processSingle<T>(response);
    });
  }

  protected $getAll<T>(
    url: string,
    config?: IRequestShortcutConfig
  ): IPromise<T[]> {
    return this.$http.get(this.baseUrl + url, config).then((response: any) => {
      return this.processMany<T>(response);
    });
  }

  protected $delete<T>(
    url: string,
    config?: IRequestShortcutConfig
  ): IPromise<any> {
    return this.$http
      .delete(this.baseUrl + url, config)
      .then((response: any) => {
        return this.processSingle<T>(response);
      });
  }

  protected $head<T>(
    url: string,
    config?: IRequestShortcutConfig
  ): IPromise<any> {
    return this.$http.head(this.baseUrl + url, config).then((response: any) => {
      return this.processSingle<T>(response);
    });
  }

  protected $jsonp<T>(
    url: string,
    config?: IRequestShortcutConfig
  ): IPromise<any> {
    return this.$http
      .jsonp(this.baseUrl + url, config)
      .then((response: any) => {
        return this.processSingle<T>(response);
      });
  }

  protected $post<T>(
    url: string,
    data: any,
    config?: IRequestShortcutConfig
  ): IPromise<any> {
    return this.$http
      .post(this.baseUrl + url, data, config)
      .then((response: any) => {
        return this.processSingle<T>(response);
      });
  }

  protected $put<T>(
    url: string,
    data: any,
    config?: IRequestShortcutConfig
  ): IPromise<any> {
    return this.$http
      .put(this.baseUrl + url, data, config)
      .then((response: any) => {
        return this.processSingle<T>(response);
      });
  }

  protected $patch<T>(
    url: string,
    data: any,
    config?: IRequestShortcutConfig
  ): IPromise<any> {
    return this.$http
      .patch(this.baseUrl + url, data, config)
      .then((response: any) => {
        return this.processSingle<T>(response);
      });
  }

  protected processSingle<T>(response: any): T {
    var data = response.data;
    var status = response.status;

    if (status >= 200 && status <= 299) {
      return data;
    } else {
      throw 'error_no_callback_for_the_received_http_status';
    }
  }

  protected processMany<T>(response: any): T[] {
    var data = response.data;
    var status = response.status;

    if (status >= 200 && status <= 299) {
      return data;
    } else {
      throw 'error_no_callback_for_the_received_http_status';
    }
  }
}

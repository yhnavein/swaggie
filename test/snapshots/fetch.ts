/* tslint:disable */
/* eslint-disable */
//----------------------
// <auto-generated>
//   Generated using Swaggie (https://github.com/yhnavein/swaggie)
//   Please avoid doing any manual changes in this file
// </auto-generated>
//----------------------
// ReSharper disable InconsistentNaming
// deno-lint-ignore-file

export const defaults = {
  baseUrl: '',
  paramsSerializer: (params: any) =>
    encodeParams(params, null, {
      allowDots: true,
      arrayFormat: 'repeat',
    }),
};

export const petClient = {
   /**
  * Add a new pet to the store
  * @param body
  */
  addPet(body: Pet ,
    $config?: RequestInit
  ): Promise<Pet> {
    const url = `${defaults.baseUrl}/pet?`;

    return fetch(url, {
      method: 'POST',
      body: JSON.stringify(body),
      ...$config,
    })
    .then((response) => response.json() as Promise<Pet>);
  },

 /**
  * Deletes a pet
  * @param apiKey (optional) (API name: api_key)
  * @param petId - ID of the pet
  */
  deletePet(apiKey: string | null | undefined,
    petId: number ,
    $config?: RequestInit
  ): Promise<unknown> {
    const url = `${defaults.baseUrl}/pet/${encodeURIComponent(`${petId}`)}?`;

    return fetch(url, {
      method: 'DELETE',
      headers: {
        'api_key': apiKey ?? '',
      },
      ...$config,
    })
    .then((response) => response.json() as Promise<unknown>);
  },

 /**
  * Finds Pets by status
  * Multiple status values can be provided with comma separated strings
  * @param status (optional) - Status values that need to be considered for filter
  */
  findPetsByStatus(status?: ("available" | "pending" | "sold") | null,
    $config?: RequestInit
  ): Promise<Pet[]> {
    const url = `${defaults.baseUrl}/pet/findByStatus?${defaults.paramsSerializer({'status': status,
      })}`;

    return fetch(url, {
      method: 'GET',
      ...$config,
    })
    .then((response) => response.json() as Promise<Pet[]>);
  },

 /**
  * Finds Pets by tags
  * Multiple tags can be provided with comma separated strings. Use tag1, tag2, tag3 for testing.
  * @deprecated
  * @param tags (optional) - Tags to filter by
  */
  findPetsByTags(tags?: string[] | null,
    $config?: RequestInit
  ): Promise<Pet[]> {
    const url = `${defaults.baseUrl}/pet/findByTags?${defaults.paramsSerializer({'tags': tags,
      })}`;

    return fetch(url, {
      method: 'GET',
      ...$config,
    })
    .then((response) => response.json() as Promise<Pet[]>);
  },

 /**
  * Find pet by ID
  * Returns a single pet
  * @param petId - ID of the pet
  */
  getPetById(petId: number ,
    $config?: RequestInit
  ): Promise<Pet> {
    const url = `${defaults.baseUrl}/pet/${encodeURIComponent(`${petId}`)}?`;

    return fetch(url, {
      method: 'GET',
      ...$config,
    })
    .then((response) => response.json() as Promise<Pet>);
  },

 /**
  * Update an existing pet by Id
  * @param body
  */
  updatePet(body: Pet ,
    $config?: RequestInit
  ): Promise<Pet> {
    const url = `${defaults.baseUrl}/pet?`;

    return fetch(url, {
      method: 'PUT',
      body: new URLSearchParams(body as any),
      headers: {
        'Content-Type': 'application/x-www-form-urlencoded',
      },
      ...$config,
    })
    .then((response) => response.json() as Promise<Pet>);
  },

 /**
  * Updates a pet in the store with form data
  * @param petId - ID of the pet
  * @param name (optional) - Name of pet that needs to be updated
  * @param status (optional) - Status of pet that needs to be updated
  */
  updatePetWithForm(petId: number ,
    name?: string | null,
    status?: string | null,
    $config?: RequestInit
  ): Promise<unknown> {
    const url = `${defaults.baseUrl}/pet/${encodeURIComponent(`${petId}`)}?${defaults.paramsSerializer({'name': name,
      'status': status,
      })}`;

    return fetch(url, {
      method: 'POST',
      ...$config,
    })
    .then((response) => response.json() as Promise<unknown>);
  },

 /**
  * uploads an image
  * @param body (optional)
  * @param petId - ID of the pet
  * @param additionalMetadata (optional) - Additional Metadata
  */
  uploadFile(body: File | null | undefined,
    petId: number ,
    additionalMetadata?: string | null,
    $config?: RequestInit
  ): Promise<File> {
    const url = `${defaults.baseUrl}/pet/${encodeURIComponent(`${petId}`)}/uploadImage?${defaults.paramsSerializer({'additionalMetadata': additionalMetadata,
      })}`;

    return fetch(url, {
      method: 'POST',
      body: body,
      ...$config,
    })
    .then((response) => response.blob() as Promise<File>);
  },

};
export const storeClient = {
   /**
  * Delete purchase order by ID
  * For valid response try integer IDs with value &lt; 1000. Anything above 1000 or nonintegers will generate API errors
  * @param orderId - ID of the order that needs to be deleted
  */
  deleteOrder(orderId: number ,
    $config?: RequestInit
  ): Promise<unknown> {
    const url = `${defaults.baseUrl}/store/order/${encodeURIComponent(`${orderId}`)}?`;

    return fetch(url, {
      method: 'DELETE',
      ...$config,
    })
    .then((response) => response.json() as Promise<unknown>);
  },

 /**
  * Returns pet inventories by status
  * Returns a map of status codes to quantities
  */
  getInventory($config?: RequestInit
  ): Promise<{ [key: string]: number }> {
    const url = `${defaults.baseUrl}/store/inventory?`;

    return fetch(url, {
      method: 'GET',
      ...$config,
    })
    .then((response) => response.json() as Promise<{ [key: string]: number }>);
  },

 /**
  * Find purchase order by ID
  * For valid response try integer IDs with value &le; 5 or &gt; 10. Other values will generate exceptions.
  * @param orderId - ID of order that needs to be fetched
  */
  getOrderById(orderId: number ,
    $config?: RequestInit
  ): Promise<Order> {
    const url = `${defaults.baseUrl}/store/order/${encodeURIComponent(`${orderId}`)}?`;

    return fetch(url, {
      method: 'GET',
      ...$config,
    })
    .then((response) => response.json() as Promise<Order>);
  },

 /**
  * Place an order for a pet
  * Place a new order in the store
  * @param body (optional)
  */
  placeOrder(body?: Order | null,
    $config?: RequestInit
  ): Promise<Order> {
    const url = `${defaults.baseUrl}/store/order?`;

    return fetch(url, {
      method: 'POST',
      body: JSON.stringify(body),
      ...$config,
    })
    .then((response) => response.json() as Promise<Order>);
  },

};
export const userClient = {
   /**
  * Create user
  * This can only be done by the logged in user.
  * @param body (optional)
  */
  createUser(body?: User | null,
    $config?: RequestInit
  ): Promise<User> {
    const url = `${defaults.baseUrl}/user?`;

    return fetch(url, {
      method: 'POST',
      body: JSON.stringify(body),
      ...$config,
    })
    .then((response) => response.json() as Promise<User>);
  },

 /**
  * Creates list of users with given input array
  * @param body (optional)
  */
  createUsersWithListInput(body?: User[] | null,
    $config?: RequestInit
  ): Promise<User> {
    const url = `${defaults.baseUrl}/user/createWithList?`;

    return fetch(url, {
      method: 'POST',
      body: JSON.stringify(body),
      ...$config,
    })
    .then((response) => response.json() as Promise<User>);
  },

 /**
  * Delete user
  * This can only be done by the logged in user.
  * @param username - The name that needs to be deleted
  */
  deleteUser(username: string ,
    $config?: RequestInit
  ): Promise<unknown> {
    const url = `${defaults.baseUrl}/user/${encodeURIComponent(`${username}`)}?`;

    return fetch(url, {
      method: 'DELETE',
      ...$config,
    })
    .then((response) => response.json() as Promise<unknown>);
  },

 /**
  * Get user by user name
  * @param username - The name that needs to be fetched. Use user1 for testing.
  */
  getUserByName(username: string ,
    $config?: RequestInit
  ): Promise<User> {
    const url = `${defaults.baseUrl}/user/${encodeURIComponent(`${username}`)}?`;

    return fetch(url, {
      method: 'GET',
      ...$config,
    })
    .then((response) => response.json() as Promise<User>);
  },

 /**
  * Logs user into the system
  * @param username (optional) - The user name for login
  * @param password (optional) - The password for login in clear text
  */
  loginUser(username?: string | null,
    password?: string | null,
    $config?: RequestInit
  ): Promise<string> {
    const url = `${defaults.baseUrl}/user/login?${defaults.paramsSerializer({'username': username,
      'password': password,
      })}`;

    return fetch(url, {
      method: 'GET',
      ...$config,
    })
    .then((response) => response.json() as Promise<string>);
  },

/** Logs out current logged in user session */
  logoutUser($config?: RequestInit
  ): Promise<unknown> {
    const url = `${defaults.baseUrl}/user/logout?`;

    return fetch(url, {
      method: 'GET',
      ...$config,
    })
    .then((response) => response.json() as Promise<unknown>);
  },

 /**
  * Update user
  * This can only be done by the logged in user.
  * @param body (optional)
  * @param username - name that needs to be updated
  */
  updateUser(body: FormData | null | undefined,
    username: string ,
    $config?: RequestInit
  ): Promise<unknown> {
    const url = `${defaults.baseUrl}/user/${encodeURIComponent(`${username}`)}?`;

    return fetch(url, {
      method: 'PUT',
      body: body,
      ...$config,
    })
    .then((response) => response.json() as Promise<unknown>);
  },

};

/**
 * Serializes a params object into a query string that is compatible with different REST APIs.
 * Implementation from: https://github.com/suhaotian/xior/blob/main/src/utils.ts
 * Kudos to @suhaotian for the original implementation
 */
function encodeParams<T = any>(
  params: T,
  parentKey: string | null = null,
  options?: {
    allowDots?: boolean;
    serializeDate?: (value: Date) => string;
    arrayFormat?: 'indices' | 'repeat' | 'brackets';
  }
): string {
  if (params === undefined || params === null) return '';
  const encodedParams: string[] = [];
  const paramsIsArray = Array.isArray(params);
  const { arrayFormat, allowDots, serializeDate } = options || {};

  const getKey = (key: string) => {
    if (allowDots && !paramsIsArray) return `.${key}`;
    if (paramsIsArray) {
      if (arrayFormat === 'brackets') {
        return '[]';
      }
      if (arrayFormat === 'repeat') {
        return '';
      }
    }
    return `[${key}]`;
  };

  for (const key in params) {
    if (Object.prototype.hasOwnProperty.call(params, key)) {
      let value = (params as any)[key];
      if (value !== undefined) {
        const encodedKey = parentKey ? `${parentKey}${getKey(key)}` : (key as string);

        // biome-ignore lint/suspicious/noGlobalIsNan: <explanation>
        if (!isNaN(value) && value instanceof Date) {
          value = serializeDate ? serializeDate(value) : value.toISOString();
        }
        if (typeof value === 'object') {
          // If the value is an object or array, recursively encode its contents
          const result = encodeParams(value, encodedKey, options);
          if (result !== '') encodedParams.push(result);
        } else {
          // Otherwise, encode the key-value pair
          encodedParams.push(`${encodeURIComponent(encodedKey)}=${encodeURIComponent(value)}`);
        }
      }
    }
  }

  return encodedParams.join('&');
}

export interface Order {
  id?: number;
  petId?: number;
  quantity?: number;
  shipDate?: Date;
/** Order Status */
  status?: ("placed" | "approved" | "delivered");
  complete?: boolean;}

export interface Category {
  id?: number;
  name?: string;}

export interface User {
  id?: number;
  username?: string;
  firstName?: string;
  lastName?: string;
  email?: string;
  password?: string;
  phone?: string;
/** User Status */
  userStatus?: number;}

export interface Tag {
  id?: number;
  name?: string;}

export interface Pet {
  id?: number;
  name: string;
  category?: Category;
  photoUrls: string[];
  tags?: Tag[];
/** pet status in the store */
  status?: ("available" | "pending" | "sold");}

/* tslint:disable */
/* eslint-disable */
//----------------------
// <auto-generated>
//   Generated using Swaggie (https://github.com/yhnavein/swaggie)
//   Please avoid doing any manual changes in this file
// </auto-generated>
//----------------------
// ReSharper disable InconsistentNaming
// deno-lint-ignore-file

import Axios, { type AxiosPromise, type AxiosRequestConfig } from "axios";
import useSWR, { type SWRConfiguration, type Key } from 'swr';

export const axios = Axios.create({
  baseURL: '',
  paramsSerializer: (params: any) =>
    encodeParams(params, null, {
      allowDots: true,
      arrayFormat: 'repeat',
    }),
});

interface SwrConfig extends SWRConfiguration {
  /* Custom key for SWR. You don't have to worry about this as by default it's the URL. You can use standard SWR Key here if you need more flexibility. */
  key?: Key;

  /* Configuration for axios fetcher */
  axios?: AxiosRequestConfig;
}
export const petClient = {
   /**
  * Add a new pet to the store
  * @param body
  */
  addPet(body: Pet ,
      $config?: AxiosRequestConfig
  ): AxiosPromise<Pet> {
    const url = `/pet`;

    return axios.request<Pet>({
      url: url,
      method: 'POST',
      data: body,
      ...$config,
    });
  },

   /**
  * Deletes a pet
  * @param apiKey (optional) (API name: api_key)
  * @param petId - ID of the pet
  */
  deletePet(apiKey: string | null | undefined,
    petId: number ,
      $config?: AxiosRequestConfig
  ): AxiosPromise<unknown> {
    const url = `/pet/${encodeURIComponent(`${petId}`)}`;

    return axios.request<unknown>({
      url: url,
      method: 'DELETE',
      headers: {
        'api_key': apiKey,
      },
      ...$config,
    });
  },

   /**
  * Finds Pets by status
  * Multiple status values can be provided with comma separated strings
  * @param status (optional) - Status values that need to be considered for filter
  */
  findPetsByStatus(status?: ("available" | "pending" | "sold") | null,
      $config?: AxiosRequestConfig
  ): AxiosPromise<Pet[]> {
    const url = `/pet/findByStatus`;

    return axios.request<Pet[]>({
      url: url,
      method: 'GET',
      params: {
        'status': status,
      },
      ...$config,
    });
  },

   /**
  * Finds Pets by tags
  * Multiple tags can be provided with comma separated strings. Use tag1, tag2, tag3 for testing.
  * @deprecated
  * @param tags (optional) - Tags to filter by
  */
  findPetsByTags(tags?: string[] | null,
      $config?: AxiosRequestConfig
  ): AxiosPromise<Pet[]> {
    const url = `/pet/findByTags`;

    return axios.request<Pet[]>({
      url: url,
      method: 'GET',
      params: {
        'tags': tags,
      },
      ...$config,
    });
  },

   /**
  * Find pet by ID
  * Returns a single pet
  * @param petId - ID of the pet
  */
  getPetById(petId: number ,
      $config?: AxiosRequestConfig
  ): AxiosPromise<Pet> {
    const url = `/pet/${encodeURIComponent(`${petId}`)}`;

    return axios.request<Pet>({
      url: url,
      method: 'GET',
      ...$config,
    });
  },

   /**
  * Update an existing pet by Id
  * @param body
  */
  updatePet(body: Pet ,
      $config?: AxiosRequestConfig
  ): AxiosPromise<Pet> {
    const url = `/pet`;

    return axios.request<Pet>({
      url: url,
      method: 'PUT',
      data: new URLSearchParams(body as any),
      headers: {
        'Content-Type': 'application/x-www-form-urlencoded',
      },
      ...$config,
    });
  },

   /**
  * Updates a pet in the store with form data
  * @param petId - ID of the pet
  * @param name (optional) - Name of pet that needs to be updated
  * @param status (optional) - Status of pet that needs to be updated
  */
  updatePetWithForm(petId: number ,
    name?: string | null,
    status?: string | null,
      $config?: AxiosRequestConfig
  ): AxiosPromise<unknown> {
    const url = `/pet/${encodeURIComponent(`${petId}`)}`;

    return axios.request<unknown>({
      url: url,
      method: 'POST',
      params: {
        'name': name,
        'status': status,
      },
      ...$config,
    });
  },

   /**
  * uploads an image
  * @param body (optional)
  * @param petId - ID of the pet
  * @param additionalMetadata (optional) - Additional Metadata
  */
  uploadFile(body: File | null | undefined,
    petId: number ,
    additionalMetadata?: string | null,
      $config?: AxiosRequestConfig
  ): AxiosPromise<File> {
    const url = `/pet/${encodeURIComponent(`${petId}`)}/uploadImage`;

    return axios.request<File>({
      url: url,
      method: 'POST',
      data: body,
      params: {
        'additionalMetadata': additionalMetadata,
      },
      ...$config,
    });
  },

  };

   /**
  * Finds Pets by status
  * Multiple status values can be provided with comma separated strings
  * @param status (optional) - Status values that need to be considered for filter
  */
export function usepetfindPetsByStatus(  status?: ("available" | "pending" | "sold") | null,
      $config?: SwrConfig
  ) {
  const url = `/pet/findByStatus`;
  const { axios: $axiosConf, key, ...config } = $config || {};

  const cacheUrl = `${url}?${encodeParams({'status': status,
    })}`;

const { data, error, mutate } = useSWR<Pet[]>(
  key ?? cacheUrl,
  () => axios.request({
    url: url,
    method: 'GET',
    params: {
      'status': status,
    },
    ...$axiosConf})
    .then((resp) => resp.data),
  config);

  return {
    data,
    isLoading: !error && !data,
    error: error,
    mutate,
  };
}

   /**
  * Finds Pets by tags
  * Multiple tags can be provided with comma separated strings. Use tag1, tag2, tag3 for testing.
  * @deprecated
  * @param tags (optional) - Tags to filter by
  */
export function usepetfindPetsByTags(  tags?: string[] | null,
      $config?: SwrConfig
  ) {
  const url = `/pet/findByTags`;
  const { axios: $axiosConf, key, ...config } = $config || {};

  const cacheUrl = `${url}?${encodeParams({'tags': tags,
    })}`;

const { data, error, mutate } = useSWR<Pet[]>(
  key ?? cacheUrl,
  () => axios.request({
    url: url,
    method: 'GET',
    params: {
      'tags': tags,
    },
    ...$axiosConf})
    .then((resp) => resp.data),
  config);

  return {
    data,
    isLoading: !error && !data,
    error: error,
    mutate,
  };
}

   /**
  * Find pet by ID
  * Returns a single pet
  * @param petId - ID of the pet
  */
export function usepetPetById(  petId: number ,
      $config?: SwrConfig
  ) {
  const url = `/pet/${encodeURIComponent(`${petId}`)}`;
  const { axios: $axiosConf, key, ...config } = $config || {};

  const cacheUrl = `${url}?`;

const { data, error, mutate } = useSWR<Pet>(
  key ?? cacheUrl,
  () => axios.request({
    url: url,
    method: 'GET',
    ...$axiosConf})
    .then((resp) => resp.data),
  config);

  return {
    data,
    isLoading: !error && !data,
    error: error,
    mutate,
  };
}

  export const storeClient = {
   /**
  * Delete purchase order by ID
  * For valid response try integer IDs with value &lt; 1000. Anything above 1000 or nonintegers will generate API errors
  * @param orderId - ID of the order that needs to be deleted
  */
  deleteOrder(orderId: number ,
      $config?: AxiosRequestConfig
  ): AxiosPromise<unknown> {
    const url = `/store/order/${encodeURIComponent(`${orderId}`)}`;

    return axios.request<unknown>({
      url: url,
      method: 'DELETE',
      ...$config,
    });
  },

   /**
  * Returns pet inventories by status
  * Returns a map of status codes to quantities
  */
  getInventory(  $config?: AxiosRequestConfig
  ): AxiosPromise<{ [key: string]: number }> {
    const url = `/store/inventory`;

    return axios.request<{ [key: string]: number }>({
      url: url,
      method: 'GET',
      ...$config,
    });
  },

   /**
  * Find purchase order by ID
  * For valid response try integer IDs with value &le; 5 or &gt; 10. Other values will generate exceptions.
  * @param orderId - ID of order that needs to be fetched
  */
  getOrderById(orderId: number ,
      $config?: AxiosRequestConfig
  ): AxiosPromise<Order> {
    const url = `/store/order/${encodeURIComponent(`${orderId}`)}`;

    return axios.request<Order>({
      url: url,
      method: 'GET',
      ...$config,
    });
  },

   /**
  * Place an order for a pet
  * Place a new order in the store
  * @param body (optional)
  */
  placeOrder(body?: Order | null,
      $config?: AxiosRequestConfig
  ): AxiosPromise<Order> {
    const url = `/store/order`;

    return axios.request<Order>({
      url: url,
      method: 'POST',
      data: body,
      ...$config,
    });
  },

  };

   /**
  * Returns pet inventories by status
  * Returns a map of status codes to quantities
  */
export function usestoreInventory(  $config?: SwrConfig
  ) {
  const url = `/store/inventory`;
  const { axios: $axiosConf, key, ...config } = $config || {};

  const cacheUrl = `${url}?`;

const { data, error, mutate } = useSWR<{ [key: string]: number }>(
  key ?? cacheUrl,
  () => axios.request({
    url: url,
    method: 'GET',
    ...$axiosConf})
    .then((resp) => resp.data),
  config);

  return {
    data,
    isLoading: !error && !data,
    error: error,
    mutate,
  };
}

   /**
  * Find purchase order by ID
  * For valid response try integer IDs with value &le; 5 or &gt; 10. Other values will generate exceptions.
  * @param orderId - ID of order that needs to be fetched
  */
export function usestoreOrderById(  orderId: number ,
      $config?: SwrConfig
  ) {
  const url = `/store/order/${encodeURIComponent(`${orderId}`)}`;
  const { axios: $axiosConf, key, ...config } = $config || {};

  const cacheUrl = `${url}?`;

const { data, error, mutate } = useSWR<Order>(
  key ?? cacheUrl,
  () => axios.request({
    url: url,
    method: 'GET',
    ...$axiosConf})
    .then((resp) => resp.data),
  config);

  return {
    data,
    isLoading: !error && !data,
    error: error,
    mutate,
  };
}

  export const userClient = {
   /**
  * Create user
  * This can only be done by the logged in user.
  * @param body (optional)
  */
  createUser(body?: User | null,
      $config?: AxiosRequestConfig
  ): AxiosPromise<User> {
    const url = `/user`;

    return axios.request<User>({
      url: url,
      method: 'POST',
      data: body,
      ...$config,
    });
  },

   /**
  * Creates list of users with given input array
  * @param body (optional)
  */
  createUsersWithListInput(body?: User[] | null,
      $config?: AxiosRequestConfig
  ): AxiosPromise<User> {
    const url = `/user/createWithList`;

    return axios.request<User>({
      url: url,
      method: 'POST',
      data: body,
      ...$config,
    });
  },

   /**
  * Delete user
  * This can only be done by the logged in user.
  * @param username - The name that needs to be deleted
  */
  deleteUser(username: string ,
      $config?: AxiosRequestConfig
  ): AxiosPromise<unknown> {
    const url = `/user/${encodeURIComponent(`${username}`)}`;

    return axios.request<unknown>({
      url: url,
      method: 'DELETE',
      ...$config,
    });
  },

   /**
  * Get user by user name
  * @param username - The name that needs to be fetched. Use user1 for testing.
  */
  getUserByName(username: string ,
      $config?: AxiosRequestConfig
  ): AxiosPromise<User> {
    const url = `/user/${encodeURIComponent(`${username}`)}`;

    return axios.request<User>({
      url: url,
      method: 'GET',
      ...$config,
    });
  },

   /**
  * Logs user into the system
  * @param username (optional) - The user name for login
  * @param password (optional) - The password for login in clear text
  */
  loginUser(username?: string | null,
    password?: string | null,
      $config?: AxiosRequestConfig
  ): AxiosPromise<string> {
    const url = `/user/login`;

    return axios.request<string>({
      url: url,
      method: 'GET',
      params: {
        'username': username,
        'password': password,
      },
      ...$config,
    });
  },

  /** Logs out current logged in user session */
  logoutUser(  $config?: AxiosRequestConfig
  ): AxiosPromise<unknown> {
    const url = `/user/logout`;

    return axios.request<unknown>({
      url: url,
      method: 'GET',
      ...$config,
    });
  },

   /**
  * Update user
  * This can only be done by the logged in user.
  * @param body (optional)
  * @param username - name that needs to be updated
  */
  updateUser(body: FormData | null | undefined,
    username: string ,
      $config?: AxiosRequestConfig
  ): AxiosPromise<unknown> {
    const url = `/user/${encodeURIComponent(`${username}`)}`;

    return axios.request<unknown>({
      url: url,
      method: 'PUT',
      data: body,
      ...$config,
    });
  },

  };

   /**
  * Get user by user name
  * @param username - The name that needs to be fetched. Use user1 for testing.
  */
export function useuserUserByName(  username: string ,
      $config?: SwrConfig
  ) {
  const url = `/user/${encodeURIComponent(`${username}`)}`;
  const { axios: $axiosConf, key, ...config } = $config || {};

  const cacheUrl = `${url}?`;

const { data, error, mutate } = useSWR<User>(
  key ?? cacheUrl,
  () => axios.request({
    url: url,
    method: 'GET',
    ...$axiosConf})
    .then((resp) => resp.data),
  config);

  return {
    data,
    isLoading: !error && !data,
    error: error,
    mutate,
  };
}

   /**
  * Logs user into the system
  * @param username (optional) - The user name for login
  * @param password (optional) - The password for login in clear text
  */
export function useuserloginUser(  username?: string | null,
      password?: string | null,
      $config?: SwrConfig
  ) {
  const url = `/user/login`;
  const { axios: $axiosConf, key, ...config } = $config || {};

  const cacheUrl = `${url}?${encodeParams({'username': username,
    'password': password,
    })}`;

const { data, error, mutate } = useSWR<string>(
  key ?? cacheUrl,
  () => axios.request({
    url: url,
    method: 'GET',
    params: {
      'username': username,
      'password': password,
    },
    ...$axiosConf})
    .then((resp) => resp.data),
  config);

  return {
    data,
    isLoading: !error && !data,
    error: error,
    mutate,
  };
}

  /** Logs out current logged in user session */
export function useuserlogoutUser(  $config?: SwrConfig
  ) {
  const url = `/user/logout`;
  const { axios: $axiosConf, key, ...config } = $config || {};

  const cacheUrl = `${url}?`;

const { data, error, mutate } = useSWR<unknown>(
  key ?? cacheUrl,
  () => axios.request({
    url: url,
    method: 'GET',
    ...$axiosConf})
    .then((resp) => resp.data),
  config);

  return {
    data,
    isLoading: !error && !data,
    error: error,
    mutate,
  };
}

  
/**
 * Serializes a params object into a query string that is compatible with different REST APIs.
 * Implementation from: https://github.com/suhaotian/xior/blob/main/src/utils.ts
 * Kudos to @suhaotian for the original implementation
 */
function encodeParams<T = any>(
  params: T,
  parentKey: string | null = null,
  options?: {
    allowDots?: boolean;
    serializeDate?: (value: Date) => string;
    arrayFormat?: 'indices' | 'repeat' | 'brackets';
  }
): string {
  if (params === undefined || params === null) return '';
  const encodedParams: string[] = [];
  const paramsIsArray = Array.isArray(params);
  const { arrayFormat, allowDots, serializeDate } = options || {};

  const getKey = (key: string) => {
    if (allowDots && !paramsIsArray) return `.${key}`;
    if (paramsIsArray) {
      if (arrayFormat === 'brackets') {
        return '[]';
      }
      if (arrayFormat === 'repeat') {
        return '';
      }
    }
    return `[${key}]`;
  };

  for (const key in params) {
    if (Object.prototype.hasOwnProperty.call(params, key)) {
      let value = (params as any)[key];
      if (value !== undefined) {
        const encodedKey = parentKey ? `${parentKey}${getKey(key)}` : (key as string);

        // biome-ignore lint/suspicious/noGlobalIsNan: <explanation>
        if (!isNaN(value) && value instanceof Date) {
          value = serializeDate ? serializeDate(value) : value.toISOString();
        }
        if (typeof value === 'object') {
          // If the value is an object or array, recursively encode its contents
          const result = encodeParams(value, encodedKey, options);
          if (result !== '') encodedParams.push(result);
        } else {
          // Otherwise, encode the key-value pair
          encodedParams.push(`${encodeURIComponent(encodedKey)}=${encodeURIComponent(value)}`);
        }
      }
    }
  }

  return encodedParams.join('&');
}

export interface Order {
  id?: number;
  petId?: number;
  quantity?: number;
  shipDate?: Date;
/** Order Status */
  status?: ("placed" | "approved" | "delivered");
  complete?: boolean;}

export interface Category {
  id?: number;
  name?: string;}

export interface User {
  id?: number;
  username?: string;
  firstName?: string;
  lastName?: string;
  email?: string;
  password?: string;
  phone?: string;
/** User Status */
  userStatus?: number;}

export interface Tag {
  id?: number;
  name?: string;}

export interface Pet {
  id?: number;
  name: string;
  category?: Category;
  photoUrls: string[];
  tags?: Tag[];
/** pet status in the store */
  status?: ("available" | "pending" | "sold");}

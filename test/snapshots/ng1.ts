/* tslint:disable */
/* eslint-disable */
//----------------------
// <auto-generated>
//   Generated using Swaggie (https://github.com/yhnavein/swaggie)
//   Please avoid doing any manual changes in this file
// </auto-generated>
//----------------------
// ReSharper disable InconsistentNaming
// deno-lint-ignore-file

import type { IHttpService, IRequestShortcutConfig, IPromise } from 'angular';

abstract class BaseService {
  constructor(protected readonly $http: IHttpService, public baseUrl: string) { }

  protected $get<T>(
    url: string,
    config?: IRequestShortcutConfig
  ): IPromise<T> {
    return this.$http.get(this.baseUrl + url, config).then((response: any) => {
      return this.processSingle<T>(response);
    });
  }

  protected $getAll<T>(
    url: string,
    config?: IRequestShortcutConfig
  ): IPromise<T[]> {
    return this.$http.get(this.baseUrl + url, config).then((response: any) => {
      return this.processMany<T>(response);
    });
  }

  protected $delete<T>(
    url: string,
    config?: IRequestShortcutConfig
  ): IPromise<any> {
    return this.$http
      .delete(this.baseUrl + url, config)
      .then((response: any) => {
        return this.processSingle<T>(response);
      });
  }

  protected $head<T>(
    url: string,
    config?: IRequestShortcutConfig
  ): IPromise<any> {
    return this.$http.head(this.baseUrl + url, config).then((response: any) => {
      return this.processSingle<T>(response);
    });
  }

  protected $jsonp<T>(
    url: string,
    config?: IRequestShortcutConfig
  ): IPromise<any> {
    return this.$http
      .jsonp(this.baseUrl + url, config)
      .then((response: any) => {
        return this.processSingle<T>(response);
      });
  }

  protected $post<T>(
    url: string,
    data: any,
    config?: IRequestShortcutConfig
  ): IPromise<any> {
    return this.$http
      .post(this.baseUrl + url, data, config)
      .then((response: any) => {
        return this.processSingle<T>(response);
      });
  }

  protected $put<T>(
    url: string,
    data: any,
    config?: IRequestShortcutConfig
  ): IPromise<any> {
    return this.$http
      .put(this.baseUrl + url, data, config)
      .then((response: any) => {
        return this.processSingle<T>(response);
      });
  }

  protected $patch<T>(
    url: string,
    data: any,
    config?: IRequestShortcutConfig
  ): IPromise<any> {
    return this.$http
      .patch(this.baseUrl + url, data, config)
      .then((response: any) => {
        return this.processSingle<T>(response);
      });
  }

  protected processSingle<T>(response: any): T {
    var data = response.data;
    var status = response.status;

    if (status >= 200 && status <= 299) {
      return data;
    } else {
      throw 'error_no_callback_for_the_received_http_status';
    }
  }

  protected processMany<T>(response: any): T[] {
    var data = response.data;
    var status = response.status;

    if (status >= 200 && status <= 299) {
      return data;
    } else {
      throw 'error_no_callback_for_the_received_http_status';
    }
  }
}

export class petService extends BaseService {
  /* @ngInject */
  constructor($http: IHttpService, ApiBaseUrl: string) {
    super($http, ApiBaseUrl);
  }

   /**
  * Add a new pet to the store
  * @param body
  */
  addPet(body: Pet ,
        config?: IRequestShortcutConfig
  ): IPromise<Pet> {
    let url = `/pet?`;

    return this.$post(
      url,
      body,
      config
    );
  }

 /**
  * Deletes a pet
  * @param apiKey (optional) (API name: api_key)
  * @param petId - ID of the pet
  */
  deletePet(apiKey: string | null | undefined,
    petId: number ,
        config?: IRequestShortcutConfig
  ): IPromise<unknown> {
    let url = `/pet/${encodeURIComponent(`${petId}`)}?`;

    return this.$delete(
      url,
    config
    );
  }

 /**
  * Finds Pets by status
  * Multiple status values can be provided with comma separated strings
  * @param status (optional) - Status values that need to be considered for filter
  */
  findPetsByStatus(status?: ("available" | "pending" | "sold") | null,
        config?: IRequestShortcutConfig
  ): IPromise<Pet[]> {
    let url = `/pet/findByStatus?`;
    if (status !== undefined) {
      url += serializeQueryParam(status, 'status') + "&";
    }
  
    return this.$get(
      url,
    config
    );
  }

 /**
  * Finds Pets by tags
  * Multiple tags can be provided with comma separated strings. Use tag1, tag2, tag3 for testing.
  * @deprecated
  * @param tags (optional) - Tags to filter by
  */
  findPetsByTags(tags?: string[] | null,
        config?: IRequestShortcutConfig
  ): IPromise<Pet[]> {
    let url = `/pet/findByTags?`;
    if (tags !== undefined) {
      url += serializeQueryParam(tags, 'tags') + "&";
    }
  
    return this.$get(
      url,
    config
    );
  }

 /**
  * Find pet by ID
  * Returns a single pet
  * @param petId - ID of the pet
  */
  getPetById(petId: number ,
        config?: IRequestShortcutConfig
  ): IPromise<Pet> {
    let url = `/pet/${encodeURIComponent(`${petId}`)}?`;

    return this.$get(
      url,
    config
    );
  }

 /**
  * Update an existing pet by Id
  * @param body
  */
  updatePet(body: Pet ,
        config?: IRequestShortcutConfig
  ): IPromise<Pet> {
    let url = `/pet?`;

    return this.$put(
      url,
      new URLSearchParams(body as any),
      config
    );
  }

 /**
  * Updates a pet in the store with form data
  * @param petId - ID of the pet
  * @param name (optional) - Name of pet that needs to be updated
  * @param status (optional) - Status of pet that needs to be updated
  */
  updatePetWithForm(petId: number ,
    name?: string | null,
    status?: string | null,
        config?: IRequestShortcutConfig
  ): IPromise<unknown> {
    let url = `/pet/${encodeURIComponent(`${petId}`)}?`;
    if (name !== undefined) {
      url += serializeQueryParam(name, 'name') + "&";
    }
    if (status !== undefined) {
      url += serializeQueryParam(status, 'status') + "&";
    }
  
    return this.$post(
      url,
      null,
      config
    );
  }

 /**
  * uploads an image
  * @param body (optional)
  * @param petId - ID of the pet
  * @param additionalMetadata (optional) - Additional Metadata
  */
  uploadFile(body: File | null | undefined,
    petId: number ,
    additionalMetadata?: string | null,
        config?: IRequestShortcutConfig
  ): IPromise<File> {
    let url = `/pet/${encodeURIComponent(`${petId}`)}/uploadImage?`;
    if (additionalMetadata !== undefined) {
      url += serializeQueryParam(additionalMetadata, 'additionalMetadata') + "&";
    }
  
    return this.$post(
      url,
      body,
      config
    );
  }

}

export class storeService extends BaseService {
  /* @ngInject */
  constructor($http: IHttpService, ApiBaseUrl: string) {
    super($http, ApiBaseUrl);
  }

   /**
  * Delete purchase order by ID
  * For valid response try integer IDs with value &lt; 1000. Anything above 1000 or nonintegers will generate API errors
  * @param orderId - ID of the order that needs to be deleted
  */
  deleteOrder(orderId: number ,
        config?: IRequestShortcutConfig
  ): IPromise<unknown> {
    let url = `/store/order/${encodeURIComponent(`${orderId}`)}?`;

    return this.$delete(
      url,
    config
    );
  }

 /**
  * Returns pet inventories by status
  * Returns a map of status codes to quantities
  */
  getInventory(    config?: IRequestShortcutConfig
  ): IPromise<{ [key: string]: number }> {
    let url = `/store/inventory?`;

    return this.$get(
      url,
    config
    );
  }

 /**
  * Find purchase order by ID
  * For valid response try integer IDs with value &le; 5 or &gt; 10. Other values will generate exceptions.
  * @param orderId - ID of order that needs to be fetched
  */
  getOrderById(orderId: number ,
        config?: IRequestShortcutConfig
  ): IPromise<Order> {
    let url = `/store/order/${encodeURIComponent(`${orderId}`)}?`;

    return this.$get(
      url,
    config
    );
  }

 /**
  * Place an order for a pet
  * Place a new order in the store
  * @param body (optional)
  */
  placeOrder(body?: Order | null,
        config?: IRequestShortcutConfig
  ): IPromise<Order> {
    let url = `/store/order?`;

    return this.$post(
      url,
      body,
      config
    );
  }

}

export class userService extends BaseService {
  /* @ngInject */
  constructor($http: IHttpService, ApiBaseUrl: string) {
    super($http, ApiBaseUrl);
  }

   /**
  * Create user
  * This can only be done by the logged in user.
  * @param body (optional)
  */
  createUser(body?: User | null,
        config?: IRequestShortcutConfig
  ): IPromise<User> {
    let url = `/user?`;

    return this.$post(
      url,
      body,
      config
    );
  }

 /**
  * Creates list of users with given input array
  * @param body (optional)
  */
  createUsersWithListInput(body?: User[] | null,
        config?: IRequestShortcutConfig
  ): IPromise<User> {
    let url = `/user/createWithList?`;

    return this.$post(
      url,
      body,
      config
    );
  }

 /**
  * Delete user
  * This can only be done by the logged in user.
  * @param username - The name that needs to be deleted
  */
  deleteUser(username: string ,
        config?: IRequestShortcutConfig
  ): IPromise<unknown> {
    let url = `/user/${encodeURIComponent(`${username}`)}?`;

    return this.$delete(
      url,
    config
    );
  }

 /**
  * Get user by user name
  * @param username - The name that needs to be fetched. Use user1 for testing.
  */
  getUserByName(username: string ,
        config?: IRequestShortcutConfig
  ): IPromise<User> {
    let url = `/user/${encodeURIComponent(`${username}`)}?`;

    return this.$get(
      url,
    config
    );
  }

 /**
  * Logs user into the system
  * @param username (optional) - The user name for login
  * @param password (optional) - The password for login in clear text
  */
  loginUser(username?: string | null,
    password?: string | null,
        config?: IRequestShortcutConfig
  ): IPromise<string> {
    let url = `/user/login?`;
    if (username !== undefined) {
      url += serializeQueryParam(username, 'username') + "&";
    }
    if (password !== undefined) {
      url += serializeQueryParam(password, 'password') + "&";
    }
  
    return this.$get(
      url,
    config
    );
  }

/** Logs out current logged in user session */
  logoutUser(    config?: IRequestShortcutConfig
  ): IPromise<unknown> {
    let url = `/user/logout?`;

    return this.$get(
      url,
    config
    );
  }

 /**
  * Update user
  * This can only be done by the logged in user.
  * @param body (optional)
  * @param username - name that needs to be updated
  */
  updateUser(body: FormData | null | undefined,
    username: string ,
        config?: IRequestShortcutConfig
  ): IPromise<unknown> {
    let url = `/user/${encodeURIComponent(`${username}`)}?`;

    return this.$put(
      url,
      body,
      config
    );
  }

}

export class ApiServices {
  public static bootstrap(moduleName: string, baseUrl: string) {
    angular
      .module(moduleName)
      .constant('ApiBaseUrl', baseUrl)
      .service('petService', petService)
      .service('storeService', storeService)
      .service('userService', userService)
;
  }
}

function serializeQueryParam(obj: any, property: string): string {
  if (obj === null || obj === undefined || obj === '') {
    return '';
  } else if (obj instanceof Date) {
    return property + '=' + encodeURIComponent(obj.toJSON());
  } else if (Array.isArray(obj)) {
    return Object.values(obj)
      .map(value => `${property}[]=${value}`)
      .join('&');
  } else if (typeof obj !== 'object') {
    return property + '=' + encodeURIComponent(obj);
  } else if (typeof obj === 'object') {
    return Object.keys(obj)
      .filter(key => !!serializeQueryParam(obj[key], property + '.' + key))
      .reduce(
        (a: any, b) =>
          a.push(serializeQueryParam(obj[b], property + '.' + b)) && a,
        []
      )
      .join('&');
  } else {
    return '';
  }
}
export interface Order {
  id?: number;
  petId?: number;
  quantity?: number;
  shipDate?: Date;
/** Order Status */
  status?: ("placed" | "approved" | "delivered");
  complete?: boolean;}

export interface Category {
  id?: number;
  name?: string;}

export interface User {
  id?: number;
  username?: string;
  firstName?: string;
  lastName?: string;
  email?: string;
  password?: string;
  phone?: string;
/** User Status */
  userStatus?: number;}

export interface Tag {
  id?: number;
  name?: string;}

export interface Pet {
  id?: number;
  name: string;
  category?: Category;
  photoUrls: string[];
  tags?: Tag[];
/** pet status in the store */
  status?: ("available" | "pending" | "sold");}
